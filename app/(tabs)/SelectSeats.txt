import React, { useState, useEffect } from "react";
import { View, Text, TouchableOpacity, StyleSheet, FlatList, Alert } from "react-native";
import { useNavigation, useRoute } from "@react-navigation/native";

const SelectSeats = () => {
  const { params } = useRoute();
  const [seats, setSeats] = useState([]);
  const [selectedSeats, setSelectedSeats] = useState([]);
  const [tripId, setTripId] = useState(null);
  const navigation = useNavigation();
    const route = useRoute(); // Access navigation params
  
    const handleNextPress = () => {
      if (selectedSeats) {
        // Log all the received data along with the selected date
        console.log("Navigating with the following data:");
        console.log("City Name:", route.params.cityName);
        console.log("City ID:", route.params.cityId);
        console.log("Package Name:", route.params.packageName);
        console.log("Package ID:", route.params.packageId);
        console.log("Category Name:", route.params.categoryName);
        console.log("Category ID:", route.params.categoryId);
        console.log("Selected Pickup Point:", route.params.selectedPickupPoint);
        console.log("Price:", route.params.price);
        console.log("Selected Vehicle Type:", route.params.vehicleType);
        console.log("Selected Date:", selectedDate);
  
  
  
        
        // Pass the selected date and all other parameters to the "SelectSeatsj" page
        navigation.navigate("Book", {
          cityName: route.params.cityName,
          cityId: route.params.cityId,
          packageName: route.params.packageName,
          packageId: route.params.packageId,
          categoryName: route.params.categoryName,
          categoryId: route.params.categoryId,
          selectedPickupPoint: route.params.selectedPickupPoint,
          price: route.params.price,
          vehicleType: route.params.vehicleType,
          selectedDate: selectedDate, // Pass selected date here
        });
      } else {
        alert("Please select a date");
      }
    };
  
  const selectedDate = params?.selectedDate;  // Retrieve selectedDate from params

  useEffect(() => {
    fetchSeatData();
  }, [selectedDate]);

  const fetchSeatData = async () => {
    try {
      const response = await fetch(
       `http://ashtavinayak.somee.com/api/Trip/TripsByDate/${selectedDate}`
      );
      const data = await response.json();

      if (data && data.data && data.data.length > 0) {
        const totalSeats = data.data[0].totalSeats;
        const availableSeats = data.data[0].availableSeats;
        setTripId(data.data[0].tripId); // Store TripId for booking API

        let seatsLayout = generateSeatsLayout(totalSeats, availableSeats);
        setSeats(seatsLayout);
      }
    } catch (error) {
      console.error("Error fetching seat data:", error);
    }
  };

  const generateSeatsLayout = (totalSeats, availableSeats) => {
    let layout = [];
    let availableSeatsSet = new Set();

    while (availableSeatsSet.size < availableSeats) {
      let randomSeat = Math.floor(Math.random() * totalSeats);
      availableSeatsSet.add(randomSeat);
    }

    for (let i = 0; i < totalSeats; i++) {
      layout.push(availableSeatsSet.has(i) ? "available" : "booked");
    }

    let rows = [];
    for (let i = 0; i < layout.length; i += 4) {
      rows.push(layout.slice(i, i + 4));
    }

    return rows;
  };

  const toggleSeat = (rowIndex, colIndex) => {
    const seatKey = `${rowIndex}-${colIndex}`;
    if (selectedSeats.includes(seatKey)) {
      setSelectedSeats(selectedSeats.filter((seat) => seat !== seatKey));
    } else {
      setSelectedSeats([...selectedSeats, seatKey]);
    }
  };

  const handleBookNowPress = async () => {
    if (selectedSeats.length === 0) {
      Alert.alert("Error", "Please select at least one seat.");
      return;
    }
  
    if (!tripId) {
      Alert.alert("Error", "Trip ID not found. Please try again.");
      return;
    }
  
    const bookingData = selectedSeats.map((seatKey) => {
      const seatNumber = seatKey.split("-")[1]; // Extract seat number from key
      return {
        SeatNumber: seatNumber,
        Adults: 1,
        Childwithseat: 0,
        Childwithoutseat: 0,
        TripId: tripId,
        // UserId: 1, // Replace with actual user ID
      };
    });
  
    try {
      const response = await fetch("http://ashtavinayak.somee.com/api/Trip/BookSeats", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(bookingData),
      });
  
      console.log("Response Status:", response.status);
      console.log("Response Headers:", response.headers);
  
      if (!response.ok) {
        const errorText = await response.text();
        console.log("Error Response:", errorText || "No error message from server.");
        Alert.alert("Booking Failed", errorText || "Server did not return an error message.");
        return;
      }
  
      const text = await response.text();
      console.log("Response Text:", text);
  
      if (!text) {
        Alert.alert("Error", "Server returned an empty response.");
        return;
      }
  
      const result = JSON.parse(text);
      console.log("Parsed JSON:", result);
  
      Alert.alert("Success", "Seats booked successfully!");
      setSelectedSeats([]);
      fetchSeatData();
    } catch (error) {
      console.error("Booking error:", error);
      Alert.alert("Error", "Something went wrong while booking seats.");
    }
  };
  
  const renderSeat = (seatType, rowIndex, colIndex) => {
    const isSelected = selectedSeats.includes(`${rowIndex}-${colIndex}`);
    let seatStyle = styles.availableSeat;

    if (isSelected) {
      seatStyle = styles.selectedSeat;
    } else if (seatType === "booked") {
      seatStyle = styles.bookedSeat;
    } else if (seatType === "available") {
      seatStyle = styles.availableSeat;
    }

    return (
      <TouchableOpacity
        key={`${rowIndex}-${colIndex}`}
        style={[styles.seat, seatStyle]}
        disabled={seatType === "booked"}
        onPress={() => toggleSeat(rowIndex, colIndex)}
      />
    );
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Select Seats for Date: {selectedDate}</Text>

      {/* Seat Indicators */}
      <View style={styles.legendContainer}>
        <View style={styles.legendItem}>
          <View style={[styles.legendColor, styles.availableSeat]} />
          <Text>Available</Text>
        </View>
        <View style={styles.legendItem}>
          <View style={[styles.legendColor, styles.bookedSeat]} />
          <Text>Booked</Text>
        </View>
        <View style={styles.legendItem}>
          <View style={[styles.legendColor, styles.selectedSeat]} />
          <Text>Selected</Text>
        </View>
      </View>

      <FlatList
        data={seats}
        renderItem={({ item, index: rowIndex }) => (
          <View style={styles.row}>
            {item.map((seatType, colIndex) => renderSeat(seatType, rowIndex, colIndex))}
          </View>
        )}
        keyExtractor={(item, index) => index.toString()}
        contentContainerStyle={styles.seatMap}
      />

      <TouchableOpacity
              style={[
                styles.nextButton,
                { backgroundColor: selectedSeats ? "#FF5722" : "#e0e0e0" },
              ]}
              onPress={handleNextPress}
              disabled={!selectedSeats}
            >
              <Text style={styles.nextButtonText}>Next</Text>
            </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    padding: 16,
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  legendContainer: {
    flexDirection: "row",
    justifyContent: "center",
    marginBottom: 20,
  },
  legendItem: {
    flexDirection: "row",
    alignItems: "center",
    marginHorizontal: 10,
  },
  legendColor: {
    width: 20,
    height: 20,
    borderRadius: 5,
    marginRight: 5,
  },
  row: {
    flexDirection: "row",
    justifyContent: "center",
    marginBottom: 10,
  },
  seatMap: {
    flexGrow: 1,
    justifyContent: "center",
  },
  seat: {
    width: 30,
    height: 30,
    borderRadius: 15,
    margin: 5,
  },
  availableSeat: {
    backgroundColor: "#FF5722",
  },
  bookedSeat: {
    backgroundColor: "#B0BEC5",
  },
  selectedSeat: {
    backgroundColor: "#4CAF50",
  },
  bookNowButton: {
    backgroundColor: "#FF5722",
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 20,
  },
  bookNowText: {
    color: "#fff",
    fontSize: 18,
  },
});

export defaultÂ SelectSeats;
